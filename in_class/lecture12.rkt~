#lang plai

(define-type FunDef
	[fundef 	(fun-name symbol?)
			(arg-name symbol?)
			(body FWAE?)])
(define-type FAE
    [num    (n number?)]
    [add     (lhs FAE?) (rhs FAE?)]
    [sub     (lhs FAE?) (rhs FAE?)]
    [with    (name symbol?) (named-expr FAE?) (body FAE?)]
    [id         (name symbol?)]
    [fun      (param symbol?) (body FAE?)]
    [app     (ftn FAE?) (arg FAE?)])

; interp : WAE DefrdSub -> number

      (define-type DefrdSub
            [mtSub]
            [aSub      (name symbol?)
                            (value number?)
                            (saved DefrdSub?)])

; lookup: symbol DefrdSub -> number
(define (lookup name ds)
      (type-case DefrdSub ds
            [mtSub       ()                  (error 'lookup "free identifier")]
            [aSub      (i v saved)      (if (symbol=? i name)
                                                                     v
                                                                     (lookup name saved))]))

; lookup-fundef: symbol list-of-FunDef -> FunDef
(define (lookup-fundef name fundefs)
	(cond
		[(empty? fundefs)
			(error 'lookup-fundef "unknown function")]
		[else
			(if (symbol=? name (fundef-fun-name (first fundefs)))
				     (first fundefs)
				     (lookup-fundef name (rest fundefs)))]))

; parse-fd: sexp -> FunDef
(define (parse-fd sexp)
	(match sexp
		[(list 'deffun (list f x) b)	(fundef f x (parse b))]))

; num-op: (number number -> number) -> (FWAE FWAE -> FWAE)
(define (num-op op)
     (lambda (x y)
          (num (op (num-n x) (num-n y)))))
(define num+ (num-op +))
(define num- (num-op -))

; parse: sexp -> FWAE
; purpose: to convert sexp to FWAE
(define (parse sexp)
   (match sexp
        [(? number?)                (num sexp)]
        [(list '+ l r)                     (add (parse l) (parse r))]
        [(list '- l r)                      (sub (parse l) (parse r))]
        [(list 'with (list i v) e)  (with  i (parse v) (parse e))]
        [(? symbol?)                (id sexp)]
        [(list 'fun (list p) b)     (fun p (parse b))]  ;; e.g., {fun {x} {+ x 1}}
        [(list f a)                       (app (parse f) (parse a))]
        [else                             (error 'parse "bad syntax: ~a" sexp)]))

; interp: FAE DefrdSub -> FAE-Value
(define (interp fae ds)
    (type-case FAE fae
        [num   (n)      (numV n)]
       [add    (l r)    (num+ (interp l ds) (interp r ds))]
       [sub    (l r)    (num- (interp l ds) (interp r ds))]
       [id       (s)     (lookup s ds)]
       [fun     (p b)  (closureV p b ds)]
       [app    (f a)   (local [(define f-val (interp f ds))
                                      (define a-val (interp a ds))]
                               (interp (closureV-body f-val)
                                           (aSub (closureV-param f-val)
                                                      a-val
                                                      (closureV-ds f-val))))]))




; [contract] subst: F1WAE symbol number -> F1WAE
(define (subst fae idtf val)
	(type-case FAE fwae
		[num	(n)		fae]
		[add	(l r) 		(add (subst l idtf val) (subst r idtf val))]
		[sub		(l r)	 	(sub (subst l idtf val) (subst r idtf val))]
		[with	(i v e) 	(with i (subst v idtf val) (if (symbol=? i idtf) e
									(subst e idtf val)))]
	 [id    (name)      (cond [(equal? name idtf ) val]
                                                 [else exp])]
          [app (f arg)       (app (subst f idtf val)
                                              (subst arg idtf val))]
          [fun  (id body)  (if (equal? idtf id)
                                           exp
                                           (fun id (subst body idtf val)))]))

